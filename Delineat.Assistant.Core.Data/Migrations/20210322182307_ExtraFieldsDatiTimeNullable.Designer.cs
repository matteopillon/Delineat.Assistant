// <auto-generated />
using System;
using Delineat.Assistant.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Delineat.Workflow.Core.SqlServer.Migrations
{
    [DbContext(typeof(DAAssistantDBContext))]
    [Migration("20210322182307_ExtraFieldsDatiTimeNullable")]
    partial class ExtraFieldsDatiTimeNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ApplicationSetting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.CustomersNotes", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("CustomersNotes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DayWorkLog", b =>
                {
                    b.Property<int>("DayWorkLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkTypeDayWorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("DayWorkLogId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkTypeDayWorkTypeId");

                    b.ToTable("DayWorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DayWorkType", b =>
                {
                    b.Property<int>("DayWorkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DayWorkTypeId");

                    b.ToTable("DayWorkTypes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<string>("HostName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PushUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("OpenedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.HasIndex("ItemId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentVersion", b =>
                {
                    b.Property<int>("DocumentVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<bool>("InEvidence")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RelativePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Reply")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatusSince")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WaitingForReply")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentVersionId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentVersions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DocumentVersion");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentVersionMetadata", b =>
                {
                    b.Property<int>("MetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetadataId");

                    b.HasIndex("DocumentVersionId");

                    b.ToTable("DocumentVersionMetadatas");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentsNotes", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("DocumentsNotes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentsTags", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentsTags");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentsTopics", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("DocumentsTopics");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentsWorkLogs", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("WorkLogId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId", "WorkLogId");

                    b.HasIndex("WorkLogId");

                    b.ToTable("DocumentsWorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ExtraField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("ValidationExpression")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExtraFields");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ExtraFieldDomainValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("NumberValue")
                        .HasColumnType("float");

                    b.Property<string>("TextValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExtraFieldId");

                    b.ToTable("ExtraFieldValues");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.HolidayDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormulaId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HolidayDates");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReferenceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Who")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("JobId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ItemsNotes", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("ItemsNotes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ItemsTags", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ItemsTags");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ItemsTopics", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("ItemsTopics");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ItemsWorkLogs", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("WorkLogId")
                        .HasColumnType("int");

                    b.HasKey("ItemId", "WorkLogId");

                    b.HasIndex("WorkLogId");

                    b.ToTable("ItemsWorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAbsence")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentJobId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ParentJobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobCode", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CodeId");

                    b.HasIndex("JobId");

                    b.ToTable("JobCodes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobExtraFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateTimeValue")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraFieldId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<double>("NumberValue")
                        .HasColumnType("float");

                    b.Property<string>("TextValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExtraFieldId");

                    b.HasIndex("JobId");

                    b.ToTable("JobExtraFields");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.ToTable("JobGroups");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobType", b =>
                {
                    b.Property<int>("JobTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTypeId");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobsNotes", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "NoteId");

                    b.HasIndex("NoteId");

                    b.ToTable("JobsNotes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobsTags", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("JobsTags");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobsWorkLogs", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("WorkLogId")
                        .HasColumnType("int");

                    b.HasKey("JobId", "WorkLogId");

                    b.HasIndex("WorkLogId");

                    b.ToTable("JobsWorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("NoteType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemindedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReminderType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("NoteId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.NotesReminderRecipient", b =>
                {
                    b.Property<int>("RecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<byte[]>("SentDate")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RecipientId");

                    b.HasIndex("NoteId");

                    b.ToTable("NotesReminderRecipients");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.NotesTags", b =>
                {
                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("NoteId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("NotesTags");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.NotesTopics", b =>
                {
                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("NoteId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("NotesTopics");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.NotesWorkLogs", b =>
                {
                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("WorkLogId")
                        .HasColumnType("int");

                    b.HasKey("NoteId", "WorkLogId");

                    b.HasIndex("WorkLogId");

                    b.ToTable("NotesWorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Specification", b =>
                {
                    b.Property<int>("SpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SpecificationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NoteId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.StoreSyncLog", b =>
                {
                    b.Property<int>("SyncId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TargetName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SyncId");

                    b.HasIndex("GroupId");

                    b.ToTable("StoreSyncLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.StoreSyncLogEntry", b =>
                {
                    b.Property<int>("LogEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreSyncLogSyncId")
                        .HasColumnType("int");

                    b.HasKey("LogEntryId");

                    b.HasIndex("StoreSyncLogSyncId");

                    b.ToTable("StoreSyncLogEntries");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Thumbnail", b =>
                {
                    b.Property<int>("ThumbnailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ThumbnailId");

                    b.HasIndex("DocumentVersionId");

                    b.ToTable("Thumbnails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Thumbnail");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TopicId");

                    b.HasIndex("JobId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPaySlip")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WeekWorkId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("WeekWorkId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.UserCredential", b =>
                {
                    b.Property<int>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CredentialId");

                    b.HasIndex("UserId");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("UserCredentials");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.WeekWorkHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OnFriday")
                        .HasColumnType("float");

                    b.Property<double>("OnMonday")
                        .HasColumnType("float");

                    b.Property<double>("OnSaturday")
                        .HasColumnType("float");

                    b.Property<double>("OnSunday")
                        .HasColumnType("float");

                    b.Property<double>("OnThursday")
                        .HasColumnType("float");

                    b.Property<double>("OnTuesday")
                        .HasColumnType("float");

                    b.Property<double>("OnWednesday")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WeekWorkHours");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.WorkLog", b =>
                {
                    b.Property<int>("WorkLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExtimatedBeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExtimatedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExtimatedHour")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSyncId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkTypeWorkLogTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WorkedHour")
                        .HasColumnType("int");

                    b.HasKey("WorkLogId");

                    b.HasIndex("WorkTypeWorkLogTypeId");

                    b.ToTable("WorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.WorkLogType", b =>
                {
                    b.Property<int>("WorkLogTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("WorkLogTypeId");

                    b.ToTable("WorkLogTypes");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<string>("PermissionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RolesRoleId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentVersionData", b =>
                {
                    b.HasBaseType("Delineat.Assistant.Core.Data.Models.DocumentVersion");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.ToTable("DocumentVersions");

                    b.HasDiscriminator().HasValue("DocumentVersionData");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ThumbnailData", b =>
                {
                    b.HasBaseType("Delineat.Assistant.Core.Data.Models.Thumbnail");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.ToTable("Thumbnails");

                    b.HasDiscriminator().HasValue("ThumbnailData");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.CustomersNotes", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Customer", "Customer")
                        .WithMany("Notes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Note", "Note")
                        .WithMany("Customers")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DayWorkLog", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Job", "Job")
                        .WithMany("DayWorkLogs")
                        .HasForeignKey("JobId");

                    b.HasOne("Delineat.Assistant.Core.Data.Models.User", "User")
                        .WithMany("DayWorkLogs")
                        .HasForeignKey("UserId");

                    b.HasOne("Delineat.Assistant.Core.Data.Models.DayWorkType", "WorkType")
                        .WithMany("DayWorkLogs")
                        .HasForeignKey("WorkTypeDayWorkTypeId");

                    b.Navigation("Job");

                    b.Navigation("User");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Document", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Item", "Item")
                        .WithMany("Documents")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentVersion", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Document", "Document")
                        .WithMany("Versions")
                        .HasForeignKey("DocumentId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentVersionMetadata", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.DocumentVersion", "DocumentVersion")
                        .WithMany()
                        .HasForeignKey("DocumentVersionId");

                    b.Navigation("DocumentVersion");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentsNotes", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Document", "Document")
                        .WithMany("Notes")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Note", "Note")
                        .WithMany("Documents")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentsTags", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Document", "Document")
                        .WithMany("Tags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Tag", "Tag")
                        .WithMany("Documents")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentsTopics", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Document", "Document")
                        .WithMany("Topics")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Topic", "Topic")
                        .WithMany("Documents")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentsWorkLogs", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Document", "Document")
                        .WithMany("WorkLogs")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.WorkLog", "WorkLog")
                        .WithMany("Documents")
                        .HasForeignKey("WorkLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("WorkLog");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ExtraFieldDomainValue", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.ExtraField", null)
                        .WithMany("ValuesDomain")
                        .HasForeignKey("ExtraFieldId");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Item", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Job", "Job")
                        .WithMany("Items")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ItemsNotes", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Item", "Item")
                        .WithMany("Notes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Note", "Note")
                        .WithMany("Items")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ItemsTags", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Item", "Item")
                        .WithMany("Tags")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Tag", "Tag")
                        .WithMany("Items")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ItemsTopics", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Item", "Item")
                        .WithMany("Topics")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Topic", "Topic")
                        .WithMany("Items")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ItemsWorkLogs", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Item", "Item")
                        .WithMany("WorkLogs")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.WorkLog", "WorkLog")
                        .WithMany("Items")
                        .HasForeignKey("WorkLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("WorkLog");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Job", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Customer", "Customer")
                        .WithMany("Jobs")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Delineat.Assistant.Core.Data.Models.JobGroup", "Group")
                        .WithMany("Jobs")
                        .HasForeignKey("GroupId");

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Job", "Parent")
                        .WithMany("SubJobs")
                        .HasForeignKey("ParentJobId");

                    b.OwnsOne("Delineat.Assistant.Core.Data.Models.JobCustomerInfo", "CustomerInfo", b1 =>
                        {
                            b1.Property<int>("JobId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime?>("Completed")
                                .HasColumnType("datetime2");

                            b1.Property<int?>("CompletedByUserId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("EstimatedClosingDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Info")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("InvoiceAmount")
                                .HasColumnType("float");

                            b1.Property<double>("OrderAmount")
                                .HasColumnType("float");

                            b1.Property<string>("OrderRef")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Quotation")
                                .HasColumnType("float");

                            b1.Property<string>("QuotationRef")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime?>("Sent")
                                .HasColumnType("datetime2");

                            b1.Property<int?>("SentByUserId")
                                .HasColumnType("int");

                            b1.HasKey("JobId");

                            b1.HasIndex("CompletedByUserId");

                            b1.HasIndex("SentByUserId");

                            b1.ToTable("Jobs");

                            b1.HasOne("Delineat.Assistant.Core.Data.Models.User", "CompletedBy")
                                .WithMany()
                                .HasForeignKey("CompletedByUserId");

                            b1.WithOwner()
                                .HasForeignKey("JobId");

                            b1.HasOne("Delineat.Assistant.Core.Data.Models.User", "SentBy")
                                .WithMany()
                                .HasForeignKey("SentByUserId");

                            b1.Navigation("CompletedBy");

                            b1.Navigation("SentBy");
                        });

                    b.Navigation("Customer");

                    b.Navigation("CustomerInfo");

                    b.Navigation("Group");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobCode", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Job", "Job")
                        .WithMany("Codes")
                        .HasForeignKey("JobId");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobExtraFieldValue", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.ExtraField", "ExtraField")
                        .WithMany()
                        .HasForeignKey("ExtraFieldId");

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Job", "Job")
                        .WithMany("Fields")
                        .HasForeignKey("JobId");

                    b.Navigation("ExtraField");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobsNotes", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Job", "Job")
                        .WithMany("Notes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Note", "Note")
                        .WithMany("Jobs")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobsTags", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Job", "Job")
                        .WithMany("Tags")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Tag", "Tag")
                        .WithMany("Jobs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobsWorkLogs", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Job", "Job")
                        .WithMany("WorkLogs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.WorkLog", "WorkLog")
                        .WithMany("Jobs")
                        .HasForeignKey("WorkLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("WorkLog");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.NotesReminderRecipient", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Note", "Note")
                        .WithMany("NotesReminderRecipients")
                        .HasForeignKey("NoteId");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.NotesTags", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Note", "Note")
                        .WithMany("Tags")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Tag", "Tag")
                        .WithMany("Notes")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.NotesTopics", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Note", "Note")
                        .WithMany("Topics")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Topic", "Topic")
                        .WithMany("Notes")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.NotesWorkLogs", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Note", "Note")
                        .WithMany("WorkLogs")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.WorkLog", "WorkLog")
                        .WithMany("Notes")
                        .HasForeignKey("WorkLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("WorkLog");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Specification", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Customer", null)
                        .WithMany("Specifications")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.StoreSyncLog", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.JobGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.StoreSyncLogEntry", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.StoreSyncLog", null)
                        .WithMany("Entries")
                        .HasForeignKey("StoreSyncLogSyncId");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Thumbnail", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.DocumentVersion", "DocumentVersion")
                        .WithMany("Thumbnails")
                        .HasForeignKey("DocumentVersionId");

                    b.Navigation("DocumentVersion");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Topic", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Job", "Job")
                        .WithMany("Topics")
                        .HasForeignKey("JobId");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.User", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.WeekWorkHours", "WeekWork")
                        .WithMany()
                        .HasForeignKey("WeekWorkId");

                    b.Navigation("WeekWork");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.UserCredential", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.User", null)
                        .WithMany("Credentials")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.WorkLog", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.WorkLogType", "WorkType")
                        .WithMany("WorkLogs")
                        .HasForeignKey("WorkTypeWorkLogTypeId");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Delineat.Assistant.Core.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Delineat.Assistant.Core.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Customer", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Notes");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DayWorkType", b =>
                {
                    b.Navigation("DayWorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Document", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Tags");

                    b.Navigation("Topics");

                    b.Navigation("Versions");

                    b.Navigation("WorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.DocumentVersion", b =>
                {
                    b.Navigation("Thumbnails");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.ExtraField", b =>
                {
                    b.Navigation("ValuesDomain");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Item", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Notes");

                    b.Navigation("Tags");

                    b.Navigation("Topics");

                    b.Navigation("WorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Job", b =>
                {
                    b.Navigation("Codes");

                    b.Navigation("DayWorkLogs");

                    b.Navigation("Fields");

                    b.Navigation("Items");

                    b.Navigation("Notes");

                    b.Navigation("SubJobs");

                    b.Navigation("Tags");

                    b.Navigation("Topics");

                    b.Navigation("WorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.JobGroup", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Note", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Documents");

                    b.Navigation("Items");

                    b.Navigation("Jobs");

                    b.Navigation("NotesReminderRecipients");

                    b.Navigation("Tags");

                    b.Navigation("Topics");

                    b.Navigation("WorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.StoreSyncLog", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Tag", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Items");

                    b.Navigation("Jobs");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.Topic", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Items");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.User", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("DayWorkLogs");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.WorkLog", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Items");

                    b.Navigation("Jobs");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("Delineat.Assistant.Core.Data.Models.WorkLogType", b =>
                {
                    b.Navigation("WorkLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
